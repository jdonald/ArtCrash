/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class KeyTapGesture : Gesture {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public KeyTapGesture(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.KeyTapGesture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(KeyTapGesture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KeyTapGesture() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_KeyTapGesture(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static Gesture.GestureType ClassType() {
    Gesture.GestureType ret = (Gesture.GestureType)LeapPINVOKE.KeyTapGesture_ClassType();
    return ret;
  }

  public KeyTapGesture() : this(LeapPINVOKE.new_KeyTapGesture__SWIG_0(), true) {
  }

  public KeyTapGesture(Gesture rhs) : this(LeapPINVOKE.new_KeyTapGesture__SWIG_1(Gesture.getCPtr(rhs)), true) {
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector Position {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.KeyTapGesture_Position_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector Direction {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.KeyTapGesture_Direction_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float Progress {
    get {
      float ret = LeapPINVOKE.KeyTapGesture_Progress_get(swigCPtr);
      return ret;
    } 
  }

  public Pointable Pointable {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.KeyTapGesture_Pointable_get(swigCPtr);
      Pointable ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pointable(cPtr, true);
      return ret;
    } 
  }

}

}
