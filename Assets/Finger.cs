/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Finger : Pointable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Finger(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Finger_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Finger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Finger() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Finger(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Finger() : this(LeapPINVOKE.new_Finger__SWIG_0(), true) {
  }

  public Finger(Pointable arg0) : this(LeapPINVOKE.new_Finger__SWIG_1(Pointable.getCPtr(arg0)), true) {
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector JointPosition(Finger.FingerJoint jointIx) {
    Vector ret = new Vector(LeapPINVOKE.Finger_JointPosition(swigCPtr, (int)jointIx), true);
    return ret;
  }

  public Bone Bone(Bone.BoneType boneIx) {
    Bone ret = new Bone(LeapPINVOKE.Finger_Bone(swigCPtr, (int)boneIx), true);
    return ret;
  }

  public Finger.FingerType Type() {
    Finger.FingerType ret = (Finger.FingerType)LeapPINVOKE.Finger_Type(swigCPtr);
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Finger_ToString(swigCPtr);
    return ret;
  }

  public new static Finger Invalid {
    get {
      Finger ret = new Finger(LeapPINVOKE.Finger_Invalid_get(), false);
      return ret;
    } 
  }

  public enum FingerJoint {
    JOINT_MCP = 0,
    JOINT_PIP = 1,
    JOINT_DIP = 2,
    JOINT_TIP = 3
  }

  public enum FingerType {
    TYPE_THUMB = 0,
    TYPE_INDEX = 1,
    TYPE_MIDDLE = 2,
    TYPE_RING = 3,
    TYPE_PINKY = 4
  }

}

}
