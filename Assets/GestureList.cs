/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class GestureList : Interface, System.Collections.Generic.IEnumerable<Gesture> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public GestureList(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.GestureList_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(GestureList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GestureList() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_GestureList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  private class GestureListEnumerator : System.Collections.Generic.IEnumerator<Gesture> {
    private GestureList _list;
    private int _index;
    public GestureListEnumerator(GestureList list) {
      _list = list;
      _index = -1;
    }
    public void Reset() {
      _index = -1;
    }
    public Gesture Current {
      get {
        return _list._operator_get(_index);
      }
    }
    object System.Collections.IEnumerator.Current {
      get {
        return this.Current;
      }
    }
    public bool MoveNext() {
      _index++;
      return (_index < _list.Count);
    }
    public void Dispose() {
      //No cleanup needed
    }
  }
  System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
    return this.GetEnumerator();
  }
  public System.Collections.Generic.IEnumerator<Gesture> GetEnumerator() {
    return new GestureListEnumerator(this);
  }
  public Gesture this[int index] {
    get { return _operator_get(index); }
  }

  public GestureList() : this(LeapPINVOKE.new_GestureList(), true) {
  }

  private Gesture _operator_get(int index) {
    Gesture ret = new Gesture(LeapPINVOKE.GestureList__operator_get(swigCPtr, index), true);
    return ret;
  }

  public GestureList Append(GestureList other) {
    GestureList ret = new GestureList(LeapPINVOKE.GestureList_Append(swigCPtr, GestureList.getCPtr(other)), false);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Count {
    get {
      int ret = LeapPINVOKE.GestureList_Count_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsEmpty {
    get {
      bool ret = LeapPINVOKE.GestureList_IsEmpty_get(swigCPtr);
      return ret;
    } 
  }

}

}
