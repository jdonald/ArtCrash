/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Listener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Listener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Listener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Listener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Listener() : this(LeapPINVOKE.new_Listener(), true) {
    SwigDirectorConnect();
  }

  public virtual void OnInit(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnInit", swigMethodTypes0)) LeapPINVOKE.Listener_OnInitSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnInit(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnConnect(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnConnect", swigMethodTypes1)) LeapPINVOKE.Listener_OnConnectSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnConnect(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnDisconnect(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnDisconnect", swigMethodTypes2)) LeapPINVOKE.Listener_OnDisconnectSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnDisconnect(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnExit(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnExit", swigMethodTypes3)) LeapPINVOKE.Listener_OnExitSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnExit(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnFrame(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnFrame", swigMethodTypes4)) LeapPINVOKE.Listener_OnFrameSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnFrame(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnFocusGained(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnFocusGained", swigMethodTypes5)) LeapPINVOKE.Listener_OnFocusGainedSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnFocusGained(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnFocusLost(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnFocusLost", swigMethodTypes6)) LeapPINVOKE.Listener_OnFocusLostSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnFocusLost(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnServiceConnect(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnServiceConnect", swigMethodTypes7)) LeapPINVOKE.Listener_OnServiceConnectSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnServiceConnect(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnServiceDisconnect(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnServiceDisconnect", swigMethodTypes8)) LeapPINVOKE.Listener_OnServiceDisconnectSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnServiceDisconnect(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  public virtual void OnDeviceChange(Controller arg0) {
    lock(arg0) {
    try {
      if (SwigDerivedClassHasMethod("OnDeviceChange", swigMethodTypes9)) LeapPINVOKE.Listener_OnDeviceChangeSwigExplicitListener(swigCPtr, Controller.getCPtr(arg0)); else LeapPINVOKE.Listener_OnDeviceChange(swigCPtr, Controller.getCPtr(arg0));
      if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    } finally {
      arg0.Dispose();
    }
    }
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnInit", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateListener_0(SwigDirectorOnInit);
    if (SwigDerivedClassHasMethod("OnConnect", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateListener_1(SwigDirectorOnConnect);
    if (SwigDerivedClassHasMethod("OnDisconnect", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateListener_2(SwigDirectorOnDisconnect);
    if (SwigDerivedClassHasMethod("OnExit", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateListener_3(SwigDirectorOnExit);
    if (SwigDerivedClassHasMethod("OnFrame", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateListener_4(SwigDirectorOnFrame);
    if (SwigDerivedClassHasMethod("OnFocusGained", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateListener_5(SwigDirectorOnFocusGained);
    if (SwigDerivedClassHasMethod("OnFocusLost", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateListener_6(SwigDirectorOnFocusLost);
    if (SwigDerivedClassHasMethod("OnServiceConnect", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateListener_7(SwigDirectorOnServiceConnect);
    if (SwigDerivedClassHasMethod("OnServiceDisconnect", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateListener_8(SwigDirectorOnServiceDisconnect);
    if (SwigDerivedClassHasMethod("OnDeviceChange", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateListener_9(SwigDirectorOnDeviceChange);
    LeapPINVOKE.Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Listener));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnInit(global::System.IntPtr arg0) {
    OnInit(new Controller(arg0, false));
  }

  private void SwigDirectorOnConnect(global::System.IntPtr arg0) {
    OnConnect(new Controller(arg0, false));
  }

  private void SwigDirectorOnDisconnect(global::System.IntPtr arg0) {
    OnDisconnect(new Controller(arg0, false));
  }

  private void SwigDirectorOnExit(global::System.IntPtr arg0) {
    OnExit(new Controller(arg0, false));
  }

  private void SwigDirectorOnFrame(global::System.IntPtr arg0) {
    OnFrame(new Controller(arg0, false));
  }

  private void SwigDirectorOnFocusGained(global::System.IntPtr arg0) {
    OnFocusGained(new Controller(arg0, false));
  }

  private void SwigDirectorOnFocusLost(global::System.IntPtr arg0) {
    OnFocusLost(new Controller(arg0, false));
  }

  private void SwigDirectorOnServiceConnect(global::System.IntPtr arg0) {
    OnServiceConnect(new Controller(arg0, false));
  }

  private void SwigDirectorOnServiceDisconnect(global::System.IntPtr arg0) {
    OnServiceDisconnect(new Controller(arg0, false));
  }

  private void SwigDirectorOnDeviceChange(global::System.IntPtr arg0) {
    OnDeviceChange(new Controller(arg0, false));
  }

  public delegate void SwigDelegateListener_0(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_1(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_2(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_3(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_4(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_5(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_6(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_7(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_8(global::System.IntPtr arg0);
  public delegate void SwigDelegateListener_9(global::System.IntPtr arg0);

  private SwigDelegateListener_0 swigDelegate0;
  private SwigDelegateListener_1 swigDelegate1;
  private SwigDelegateListener_2 swigDelegate2;
  private SwigDelegateListener_3 swigDelegate3;
  private SwigDelegateListener_4 swigDelegate4;
  private SwigDelegateListener_5 swigDelegate5;
  private SwigDelegateListener_6 swigDelegate6;
  private SwigDelegateListener_7 swigDelegate7;
  private SwigDelegateListener_8 swigDelegate8;
  private SwigDelegateListener_9 swigDelegate9;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(Controller) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(Controller) };
}

}
