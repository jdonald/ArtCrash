/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class InteractionBox : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public InteractionBox(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.InteractionBox_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(InteractionBox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~InteractionBox() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_InteractionBox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public InteractionBox() : this(LeapPINVOKE.new_InteractionBox(), true) {
  }

  public Vector NormalizePoint(Vector position, bool clamp) {
    Vector ret = new Vector(LeapPINVOKE.InteractionBox_NormalizePoint__SWIG_0(swigCPtr, Vector.getCPtr(position), clamp), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector NormalizePoint(Vector position) {
    Vector ret = new Vector(LeapPINVOKE.InteractionBox_NormalizePoint__SWIG_1(swigCPtr, Vector.getCPtr(position)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector DenormalizePoint(Vector normalizedPosition) {
    Vector ret = new Vector(LeapPINVOKE.InteractionBox_DenormalizePoint(swigCPtr, Vector.getCPtr(normalizedPosition)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(InteractionBox arg0) {
    bool ret = LeapPINVOKE.InteractionBox_Equals(swigCPtr, InteractionBox.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.InteractionBox_ToString(swigCPtr);
    return ret;
  }

  public Vector Center {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.InteractionBox_Center_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float Width {
    get {
      float ret = LeapPINVOKE.InteractionBox_Width_get(swigCPtr);
      return ret;
    } 
  }

  public float Height {
    get {
      float ret = LeapPINVOKE.InteractionBox_Height_get(swigCPtr);
      return ret;
    } 
  }

  public float Depth {
    get {
      float ret = LeapPINVOKE.InteractionBox_Depth_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.InteractionBox_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public static InteractionBox Invalid {
    get {
      InteractionBox ret = new InteractionBox(LeapPINVOKE.InteractionBox_Invalid_get(), false);
      return ret;
    } 
  }

}

}
