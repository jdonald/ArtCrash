/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Gesture : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Gesture(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Gesture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Gesture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Gesture() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Gesture(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Gesture() : this(LeapPINVOKE.new_Gesture__SWIG_0(), true) {
  }

  public Gesture(Gesture rhs) : this(LeapPINVOKE.new_Gesture__SWIG_1(Gesture.getCPtr(rhs)), true) {
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Equals(Gesture rhs) {
    bool ret = LeapPINVOKE.Gesture_Equals(swigCPtr, Gesture.getCPtr(rhs));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Gesture_ToString(swigCPtr);
    return ret;
  }

  public Gesture.GestureType Type {
    get {
      Gesture.GestureType ret = (Gesture.GestureType)LeapPINVOKE.Gesture_Type_get(swigCPtr);
      return ret;
    } 
  }

  public Gesture.GestureState State {
    get {
      Gesture.GestureState ret = (Gesture.GestureState)LeapPINVOKE.Gesture_State_get(swigCPtr);
      return ret;
    } 
  }

  public int Id {
    get {
      int ret = LeapPINVOKE.Gesture_Id_get(swigCPtr);
      return ret;
    } 
  }

  public long Duration {
    get {
      long ret = LeapPINVOKE.Gesture_Duration_get(swigCPtr);
      return ret;
    } 
  }

  public float DurationSeconds {
    get {
      float ret = LeapPINVOKE.Gesture_DurationSeconds_get(swigCPtr);
      return ret;
    } 
  }

  public Frame Frame {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Gesture_Frame_get(swigCPtr);
      Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, true);
      return ret;
    } 
  }

  public HandList Hands {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Gesture_Hands_get(swigCPtr);
      HandList ret = (cPtr == global::System.IntPtr.Zero) ? null : new HandList(cPtr, true);
      return ret;
    } 
  }

  public PointableList Pointables {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Gesture_Pointables_get(swigCPtr);
      PointableList ret = (cPtr == global::System.IntPtr.Zero) ? null : new PointableList(cPtr, true);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Gesture_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public static Gesture Invalid {
    get {
      Gesture ret = new Gesture(LeapPINVOKE.Gesture_Invalid_get(), false);
      return ret;
    } 
  }

  public enum GestureType {
    TYPE_INVALID = -1,
    TYPE_SWIPE = 1,
    TYPE_CIRCLE = 4,
    TYPE_SCREEN_TAP = 5,
    TYPE_KEY_TAP = 6,
    TYPEINVALID = TYPE_INVALID,
    TYPESWIPE = TYPE_SWIPE,
    TYPECIRCLE = TYPE_CIRCLE,
    TYPESCREENTAP = TYPE_SCREEN_TAP,
    TYPEKEYTAP = TYPE_KEY_TAP
  }

  public enum GestureState {
    STATE_INVALID = -1,
    STATE_START = 1,
    STATE_UPDATE = 2,
    STATE_STOP = 3,
    STATEINVALID = STATE_INVALID,
    STATESTART = STATE_START,
    STATEUPDATE = STATE_UPDATE,
    STATESTOP = STATE_STOP
  }

}

}
