/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Tool : Pointable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Tool(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Tool_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Tool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Tool() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Tool(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Tool() : this(LeapPINVOKE.new_Tool__SWIG_0(), true) {
  }

  public Tool(Pointable arg0) : this(LeapPINVOKE.new_Tool__SWIG_1(Pointable.getCPtr(arg0)), true) {
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Tool_ToString(swigCPtr);
    return ret;
  }

  public new static Tool Invalid {
    get {
      Tool ret = new Tool(LeapPINVOKE.Tool_Invalid_get(), false);
      return ret;
    } 
  }

}

}
