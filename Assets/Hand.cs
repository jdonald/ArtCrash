/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Hand : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Hand(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Hand_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Hand obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Hand() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Hand(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Hand() : this(LeapPINVOKE.new_Hand(), true) {
  }

  public Pointable Pointable(int id) {
    Pointable ret = new Pointable(LeapPINVOKE.Hand_Pointable(swigCPtr, id), true);
    return ret;
  }

  public Finger Finger(int id) {
    Finger ret = new Finger(LeapPINVOKE.Hand_Finger(swigCPtr, id), true);
    return ret;
  }

  public Tool Tool(int id) {
    Tool ret = new Tool(LeapPINVOKE.Hand_Tool(swigCPtr, id), true);
    return ret;
  }

  public Vector Translation(Frame sinceFrame) {
    Vector ret = new Vector(LeapPINVOKE.Hand_Translation(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float TranslationProbability(Frame sinceFrame) {
    float ret = LeapPINVOKE.Hand_TranslationProbability(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector RotationAxis(Frame sinceFrame) {
    Vector ret = new Vector(LeapPINVOKE.Hand_RotationAxis(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float RotationAngle(Frame sinceFrame) {
    float ret = LeapPINVOKE.Hand_RotationAngle__SWIG_0(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float RotationAngle(Frame sinceFrame, Vector axis) {
    float ret = LeapPINVOKE.Hand_RotationAngle__SWIG_1(swigCPtr, Frame.getCPtr(sinceFrame), Vector.getCPtr(axis));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix RotationMatrix(Frame sinceFrame) {
    Matrix ret = new Matrix(LeapPINVOKE.Hand_RotationMatrix(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float RotationProbability(Frame sinceFrame) {
    float ret = LeapPINVOKE.Hand_RotationProbability(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float ScaleFactor(Frame sinceFrame) {
    float ret = LeapPINVOKE.Hand_ScaleFactor(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float ScaleProbability(Frame sinceFrame) {
    float ret = LeapPINVOKE.Hand_ScaleProbability(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(Hand arg0) {
    bool ret = LeapPINVOKE.Hand_Equals(swigCPtr, Hand.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Hand_ToString(swigCPtr);
    return ret;
  }

  public int Id {
    get {
      int ret = LeapPINVOKE.Hand_Id_get(swigCPtr);
      return ret;
    } 
  }

  public PointableList Pointables {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Pointables_get(swigCPtr);
      PointableList ret = (cPtr == global::System.IntPtr.Zero) ? null : new PointableList(cPtr, true);
      return ret;
    } 
  }

  public FingerList Fingers {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Fingers_get(swigCPtr);
      FingerList ret = (cPtr == global::System.IntPtr.Zero) ? null : new FingerList(cPtr, true);
      return ret;
    } 
  }

  public ToolList Tools {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Tools_get(swigCPtr);
      ToolList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ToolList(cPtr, true);
      return ret;
    } 
  }

  public Vector PalmPosition {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_PalmPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector PalmVelocity {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_PalmVelocity_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector PalmNormal {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_PalmNormal_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector Direction {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Direction_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Matrix Basis {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Basis_get(swigCPtr);
      Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, true);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Hand_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public Vector SphereCenter {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_SphereCenter_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float SphereRadius {
    get {
      float ret = LeapPINVOKE.Hand_SphereRadius_get(swigCPtr);
      return ret;
    } 
  }

  public float GrabStrength {
    get {
      float ret = LeapPINVOKE.Hand_GrabStrength_get(swigCPtr);
      return ret;
    } 
  }

  public float PinchStrength {
    get {
      float ret = LeapPINVOKE.Hand_PinchStrength_get(swigCPtr);
      return ret;
    } 
  }

  public float PalmWidth {
    get {
      float ret = LeapPINVOKE.Hand_PalmWidth_get(swigCPtr);
      return ret;
    } 
  }

  public Vector StabilizedPalmPosition {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_StabilizedPalmPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector WristPosition {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_WristPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float TimeVisible {
    get {
      float ret = LeapPINVOKE.Hand_TimeVisible_get(swigCPtr);
      return ret;
    } 
  }

  public float Confidence {
    get {
      float ret = LeapPINVOKE.Hand_Confidence_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsLeft {
    get {
      bool ret = LeapPINVOKE.Hand_IsLeft_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsRight {
    get {
      bool ret = LeapPINVOKE.Hand_IsRight_get(swigCPtr);
      return ret;
    } 
  }

  public Frame Frame {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Frame_get(swigCPtr);
      Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, true);
      return ret;
    } 
  }

  public Arm Arm {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Hand_Arm_get(swigCPtr);
      Arm ret = (cPtr == global::System.IntPtr.Zero) ? null : new Arm(cPtr, true);
      return ret;
    } 
  }

  public static Hand Invalid {
    get {
      Hand ret = new Hand(LeapPINVOKE.Hand_Invalid_get(), false);
      return ret;
    } 
  }

}

}
