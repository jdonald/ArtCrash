/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Screen : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Screen(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Screen_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Screen obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Screen() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Screen(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Screen() : this(LeapPINVOKE.new_Screen(), true) {
  }

  public Vector Intersect(Pointable pointable, bool normalize, float clampRatio) {
    Vector ret = new Vector(LeapPINVOKE.Screen_Intersect__SWIG_0(swigCPtr, Pointable.getCPtr(pointable), normalize, clampRatio), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Intersect(Pointable pointable, bool normalize) {
    Vector ret = new Vector(LeapPINVOKE.Screen_Intersect__SWIG_1(swigCPtr, Pointable.getCPtr(pointable), normalize), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Intersect(Vector position, Vector direction, bool normalize, float clampRatio) {
    Vector ret = new Vector(LeapPINVOKE.Screen_Intersect__SWIG_2(swigCPtr, Vector.getCPtr(position), Vector.getCPtr(direction), normalize, clampRatio), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Intersect(Vector position, Vector direction, bool normalize) {
    Vector ret = new Vector(LeapPINVOKE.Screen_Intersect__SWIG_3(swigCPtr, Vector.getCPtr(position), Vector.getCPtr(direction), normalize), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Project(Vector position, bool normalize, float clampRatio) {
    Vector ret = new Vector(LeapPINVOKE.Screen_Project__SWIG_0(swigCPtr, Vector.getCPtr(position), normalize, clampRatio), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Project(Vector position, bool normalize) {
    Vector ret = new Vector(LeapPINVOKE.Screen_Project__SWIG_1(swigCPtr, Vector.getCPtr(position), normalize), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Normal() {
    Vector ret = new Vector(LeapPINVOKE.Screen_Normal(swigCPtr), true);
    return ret;
  }

  public float DistanceToPoint(Vector point) {
    float ret = LeapPINVOKE.Screen_DistanceToPoint(swigCPtr, Vector.getCPtr(point));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(Screen arg0) {
    bool ret = LeapPINVOKE.Screen_Equals(swigCPtr, Screen.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Screen_ToString(swigCPtr);
    return ret;
  }

  public int Id {
    get {
      int ret = LeapPINVOKE.Screen_Id_get(swigCPtr);
      return ret;
    } 
  }

  public Vector HorizontalAxis {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Screen_HorizontalAxis_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector VerticalAxis {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Screen_VerticalAxis_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector BottomLeftCorner {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Screen_BottomLeftCorner_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public int WidthPixels {
    get {
      int ret = LeapPINVOKE.Screen_WidthPixels_get(swigCPtr);
      return ret;
    } 
  }

  public int HeightPixels {
    get {
      int ret = LeapPINVOKE.Screen_HeightPixels_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Screen_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public static Screen Invalid {
    get {
      Screen ret = new Screen(LeapPINVOKE.Screen_Invalid_get(), false);
      return ret;
    } 
  }

}

}
