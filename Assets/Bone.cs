/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Bone : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Bone(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Bone_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Bone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Bone() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Bone(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Bone() : this(LeapPINVOKE.new_Bone(), true) {
  }

  public bool Equals(Bone arg0) {
    bool ret = LeapPINVOKE.Bone_Equals(swigCPtr, Bone.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Bone_ToString(swigCPtr);
    return ret;
  }

  public Vector PrevJoint {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Bone_PrevJoint_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector NextJoint {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Bone_NextJoint_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector Center {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Bone_Center_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector Direction {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Bone_Direction_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float Length {
    get {
      float ret = LeapPINVOKE.Bone_Length_get(swigCPtr);
      return ret;
    } 
  }

  public float Width {
    get {
      float ret = LeapPINVOKE.Bone_Width_get(swigCPtr);
      return ret;
    } 
  }

  public Bone.BoneType Type {
    get {
      Bone.BoneType ret = (Bone.BoneType)LeapPINVOKE.Bone_Type_get(swigCPtr);
      return ret;
    } 
  }

  public Matrix Basis {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Bone_Basis_get(swigCPtr);
      Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, true);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Bone_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public static Bone Invalid {
    get {
      Bone ret = new Bone(LeapPINVOKE.Bone_Invalid_get(), false);
      return ret;
    } 
  }

  public enum BoneType {
    TYPE_METACARPAL = 0,
    TYPE_PROXIMAL = 1,
    TYPE_INTERMEDIATE = 2,
    TYPE_DISTAL = 3
  }

}

}
