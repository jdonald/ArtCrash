/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Frame : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Frame(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Frame_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Frame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Frame() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Frame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /**
  * Encodes this Frame object as a byte string.
  *
  * \include Frame_serialize.txt
  *
  * @since 2.1.0
  */
  public byte[] Serialize {
    get {
      byte[] ptr = new byte[SerializeLength];
      SerializeWithArg(ptr);
      return ptr;
    }
  }

 /**
  * Decodes a byte string to replace the properties of this Frame.
  *
  * A Controller object must be instantiated for this function to succeed, but
  * it does not need to be connected. To extract gestures from the deserialized
  * frame, you must enable the appropriate gestures first.
  *
  * Any existing data in the frame is
  * destroyed. If you have references to
  * child objects (hands, fingers, etc.), these are preserved as long as the
  * references remain in scope.
  *
  * \include Frame_deserialize.txt
  *
  * **Note:** The behavior when calling functions which take
  * another Frame object as a parameter is undefined when either frame has
  * been deserialized. For example, calling ``Gestures(sinceFrame)`` on a
  * deserialized frame or with a deserialized frame as parameter (or both)
  * does not necessarily return all gestures that occured between the two
  * frames. Motion functions, like ``ScaleFactor(startFrame)``, are more
  * likely to return reasonable results, but could return anomalous values
  * in some cases.
  *
  * @param arg A byte array containing the bytes of a serialized frame.
  * @since 2.1.0
  */
  public void Deserialize(byte[] arg) {
    DeserializeWithLength(arg, arg.Length);
  }

  public Frame() : this(LeapPINVOKE.new_Frame(), true) {
  }

  public Hand Hand(int id) {
    Hand ret = new Hand(LeapPINVOKE.Frame_Hand(swigCPtr, id), true);
    return ret;
  }

  public Pointable Pointable(int id) {
    Pointable ret = new Pointable(LeapPINVOKE.Frame_Pointable(swigCPtr, id), true);
    return ret;
  }

  public Finger Finger(int id) {
    Finger ret = new Finger(LeapPINVOKE.Frame_Finger(swigCPtr, id), true);
    return ret;
  }

  public Tool Tool(int id) {
    Tool ret = new Tool(LeapPINVOKE.Frame_Tool(swigCPtr, id), true);
    return ret;
  }

  public Gesture Gesture(int id) {
    Gesture ret = new Gesture(LeapPINVOKE.Frame_Gesture(swigCPtr, id), true);
    return ret;
  }

  public GestureList Gestures() {
    GestureList ret = new GestureList(LeapPINVOKE.Frame_Gestures__SWIG_0(swigCPtr), true);
    return ret;
  }

  public GestureList Gestures(Frame sinceFrame) {
    GestureList ret = new GestureList(LeapPINVOKE.Frame_Gestures__SWIG_1(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Translation(Frame sinceFrame) {
    Vector ret = new Vector(LeapPINVOKE.Frame_Translation(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float TranslationProbability(Frame sinceFrame) {
    float ret = LeapPINVOKE.Frame_TranslationProbability(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector RotationAxis(Frame sinceFrame) {
    Vector ret = new Vector(LeapPINVOKE.Frame_RotationAxis(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float RotationAngle(Frame sinceFrame) {
    float ret = LeapPINVOKE.Frame_RotationAngle__SWIG_0(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float RotationAngle(Frame sinceFrame, Vector axis) {
    float ret = LeapPINVOKE.Frame_RotationAngle__SWIG_1(swigCPtr, Frame.getCPtr(sinceFrame), Vector.getCPtr(axis));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix RotationMatrix(Frame sinceFrame) {
    Matrix ret = new Matrix(LeapPINVOKE.Frame_RotationMatrix(swigCPtr, Frame.getCPtr(sinceFrame)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float RotationProbability(Frame sinceFrame) {
    float ret = LeapPINVOKE.Frame_RotationProbability(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float ScaleFactor(Frame sinceFrame) {
    float ret = LeapPINVOKE.Frame_ScaleFactor(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float ScaleProbability(Frame sinceFrame) {
    float ret = LeapPINVOKE.Frame_ScaleProbability(swigCPtr, Frame.getCPtr(sinceFrame));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(Frame arg0) {
    bool ret = LeapPINVOKE.Frame_Equals(swigCPtr, Frame.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SerializeWithArg(byte[] ptr) {
    LeapPINVOKE.Frame_SerializeWithArg(swigCPtr, ptr);
  }

  public void DeserializeWithLength(byte[] ptr, int length) {
    LeapPINVOKE.Frame_DeserializeWithLength(swigCPtr, ptr, length);
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Frame_ToString(swigCPtr);
    return ret;
  }

  public long Id {
    get {
      long ret = LeapPINVOKE.Frame_Id_get(swigCPtr);
      return ret;
    } 
  }

  public long Timestamp {
    get {
      long ret = LeapPINVOKE.Frame_Timestamp_get(swigCPtr);
      return ret;
    } 
  }

  public float CurrentFramesPerSecond {
    get {
      float ret = LeapPINVOKE.Frame_CurrentFramesPerSecond_get(swigCPtr);
      return ret;
    } 
  }

  public PointableList Pointables {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Frame_Pointables_get(swigCPtr);
      PointableList ret = (cPtr == global::System.IntPtr.Zero) ? null : new PointableList(cPtr, true);
      return ret;
    } 
  }

  public FingerList Fingers {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Frame_Fingers_get(swigCPtr);
      FingerList ret = (cPtr == global::System.IntPtr.Zero) ? null : new FingerList(cPtr, true);
      return ret;
    } 
  }

  public ToolList Tools {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Frame_Tools_get(swigCPtr);
      ToolList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ToolList(cPtr, true);
      return ret;
    } 
  }

  public HandList Hands {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Frame_Hands_get(swigCPtr);
      HandList ret = (cPtr == global::System.IntPtr.Zero) ? null : new HandList(cPtr, true);
      return ret;
    } 
  }

  public ImageList Images {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Frame_Images_get(swigCPtr);
      ImageList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageList(cPtr, true);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Frame_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public InteractionBox InteractionBox {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Frame_InteractionBox_get(swigCPtr);
      InteractionBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new InteractionBox(cPtr, true);
      return ret;
    } 
  }

  public int SerializeLength {
    get {
      int ret = LeapPINVOKE.Frame_SerializeLength_get(swigCPtr);
      return ret;
    } 
  }

  public static Frame Invalid {
    get {
      Frame ret = new Frame(LeapPINVOKE.Frame_Invalid_get(), false);
      return ret;
    } 
  }

}

}
