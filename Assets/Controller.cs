/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Controller : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Controller(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Controller_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Controller obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Controller() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Controller(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Controller() : this(LeapPINVOKE.new_Controller__SWIG_0(), true) {
  }

  public Controller(Listener listener) : this(LeapPINVOKE.new_Controller__SWIG_1(Listener.getCPtr(listener)), true) {
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsServiceConnected() {
    bool ret = LeapPINVOKE.Controller_IsServiceConnected(swigCPtr);
    return ret;
  }

  public void SetPolicyFlags(Controller.PolicyFlag flags) {
    LeapPINVOKE.Controller_SetPolicyFlags(swigCPtr, (int)flags);
  }

  public bool AddListener(Listener listener) {
    bool ret = LeapPINVOKE.Controller_AddListener(swigCPtr, Listener.getCPtr(listener));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveListener(Listener listener) {
    bool ret = LeapPINVOKE.Controller_RemoveListener(swigCPtr, Listener.getCPtr(listener));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Frame Frame(int history) {
    Frame ret = new Frame(LeapPINVOKE.Controller_Frame__SWIG_0(swigCPtr, history), true);
    return ret;
  }

  public Frame Frame() {
    Frame ret = new Frame(LeapPINVOKE.Controller_Frame__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void EnableGesture(Gesture.GestureType type, bool enable) {
    LeapPINVOKE.Controller_EnableGesture__SWIG_0(swigCPtr, (int)type, enable);
  }

  public void EnableGesture(Gesture.GestureType type) {
    LeapPINVOKE.Controller_EnableGesture__SWIG_1(swigCPtr, (int)type);
  }

  public bool IsGestureEnabled(Gesture.GestureType type) {
    bool ret = LeapPINVOKE.Controller_IsGestureEnabled(swigCPtr, (int)type);
    return ret;
  }

  public bool IsConnected {
    get {
      bool ret = LeapPINVOKE.Controller_IsConnected_get(swigCPtr);
      return ret;
    } 
  }

  public bool HasFocus {
    get {
      bool ret = LeapPINVOKE.Controller_HasFocus_get(swigCPtr);
      return ret;
    } 
  }

  public Controller.PolicyFlag PolicyFlags {
    get {
      Controller.PolicyFlag ret = (Controller.PolicyFlag)LeapPINVOKE.Controller_PolicyFlags_get(swigCPtr);
      return ret;
    } 
  }

  public Config Config {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Controller_Config_get(swigCPtr);
      Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new Config(cPtr, true);
      return ret;
    } 
  }

  public ScreenList LocatedScreens {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Controller_LocatedScreens_get(swigCPtr);
      ScreenList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ScreenList(cPtr, true);
      return ret;
    } 
  }

  public DeviceList Devices {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Controller_Devices_get(swigCPtr);
      DeviceList ret = (cPtr == global::System.IntPtr.Zero) ? null : new DeviceList(cPtr, true);
      return ret;
    } 
  }

  public enum PolicyFlag {
    POLICY_DEFAULT = 0,
    POLICY_BACKGROUND_FRAMES = (1 << 0),
    POLICY_IMAGES = (1 << 1),
    POLICY_OPTIMIZE_HMD = (1 << 2),
    POLICYDEFAULT = POLICY_DEFAULT,
    POLICYBACKGROUNDFRAMES = POLICY_BACKGROUND_FRAMES
  }

}

}
