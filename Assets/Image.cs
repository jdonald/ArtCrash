/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Image : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Image(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Image_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Image() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /**
  * The image data.
  *
  * The image data is a set of 8-bit intensity values. The buffer is
  * ``image.Width * image.Height`` bytes long.
  *
  * \include Image_data_1.txt
  *
  * @since 2.1.0
  */
  public byte[] Data {
    get {
      byte[] ret = new byte[Width * Height];
      DataWithArg(ret);
      return ret;
    }
  }
  /**
  * The distortion calibration map for this image.
  *
  * The calibration map is a 64x64 grid of points. Each point is defined by
  * a pair of 32-bit floating point values. Each point in the map
  * represents a ray projected into the camera. The value of
  * a grid point defines the pixel in the image data containing the brightness
  * value produced by the light entering along the corresponding ray. By
  * interpolating between grid data points, you can find the brightness value
  * for any projected ray. Grid values that fall outside the range [0..1] do
  * not correspond to a value in the image data and those points should be ignored.
  *
  * \include Image_distortion_1.txt
  *
  * The calibration map can be used to render an undistorted image as well as to
  * find the true angle from the camera to a feature in the raw image. The
  * distortion map itself is designed to be used with GLSL shader programs.
  * In other contexts, it may be more convenient to use the Image Rectify()
  * and Warp() functions.
  *
  * Distortion is caused by the lens geometry as well as imperfections in the
  * lens and sensor window. The calibration map is created by the calibration
  * process run for each device at the factory (and which can be rerun by the
  * user).
  *
  * Note, in a future release, there will be two distortion maps per image;
  * one containing the horizontal values and the other containing the vertical values.
  *
  * @since 2.1.0
  */
  public float[] Distortion {
    get {
      float[] ret = new float[DistortionWidth * DistortionHeight];
      DistortionWithArg(ret);
      return ret;
    }
  }

  public Image() : this(LeapPINVOKE.new_Image(), true) {
  }

  public void DataWithArg(byte[] dst) {
    LeapPINVOKE.Image_DataWithArg(swigCPtr, dst);
  }

  public void DistortionWithArg(float[] dst) {
    LeapPINVOKE.Image_DistortionWithArg(swigCPtr, dst);
  }

  public Vector Rectify(Vector uv) {
    Vector ret = new Vector(LeapPINVOKE.Image_Rectify(swigCPtr, Vector.getCPtr(uv)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector Warp(Vector xy) {
    Vector ret = new Vector(LeapPINVOKE.Image_Warp(swigCPtr, Vector.getCPtr(xy)), true);
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(Image arg0) {
    bool ret = LeapPINVOKE.Image_Equals(swigCPtr, Image.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Image_ToString(swigCPtr);
    return ret;
  }

  public int Id {
    get {
      int ret = LeapPINVOKE.Image_Id_get(swigCPtr);
      return ret;
    } 
  }

  public int Width {
    get {
      int ret = LeapPINVOKE.Image_Width_get(swigCPtr);
      return ret;
    } 
  }

  public int Height {
    get {
      int ret = LeapPINVOKE.Image_Height_get(swigCPtr);
      return ret;
    } 
  }

  public int DistortionWidth {
    get {
      int ret = LeapPINVOKE.Image_DistortionWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int DistortionHeight {
    get {
      int ret = LeapPINVOKE.Image_DistortionHeight_get(swigCPtr);
      return ret;
    } 
  }

  public float RayOffsetX {
    get {
      float ret = LeapPINVOKE.Image_RayOffsetX_get(swigCPtr);
      return ret;
    } 
  }

  public float RayOffsetY {
    get {
      float ret = LeapPINVOKE.Image_RayOffsetY_get(swigCPtr);
      return ret;
    } 
  }

  public float RayScaleX {
    get {
      float ret = LeapPINVOKE.Image_RayScaleX_get(swigCPtr);
      return ret;
    } 
  }

  public float RayScaleY {
    get {
      float ret = LeapPINVOKE.Image_RayScaleY_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Image_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public static Image Invalid {
    get {
      Image ret = new Image(LeapPINVOKE.Image_Invalid_get(), false);
      return ret;
    } 
  }

}

}
