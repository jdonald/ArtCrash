/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Leap {

public class Pointable : Interface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public Pointable(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LeapPINVOKE.Pointable_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Pointable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Pointable() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LeapPINVOKE.delete_Pointable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Pointable() : this(LeapPINVOKE.new_Pointable(), true) {
  }

  public bool Equals(Pointable arg0) {
    bool ret = LeapPINVOKE.Pointable_Equals(swigCPtr, Pointable.getCPtr(arg0));
    if (LeapPINVOKE.SWIGPendingException.Pending) throw LeapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = LeapPINVOKE.Pointable_ToString(swigCPtr);
    return ret;
  }

  public int Id {
    get {
      int ret = LeapPINVOKE.Pointable_Id_get(swigCPtr);
      return ret;
    } 
  }

  public Hand Hand {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Pointable_Hand_get(swigCPtr);
      Hand ret = (cPtr == global::System.IntPtr.Zero) ? null : new Hand(cPtr, true);
      return ret;
    } 
  }

  public Vector TipPosition {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Pointable_TipPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector TipVelocity {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Pointable_TipVelocity_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public Vector Direction {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Pointable_Direction_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float Width {
    get {
      float ret = LeapPINVOKE.Pointable_Width_get(swigCPtr);
      return ret;
    } 
  }

  public float Length {
    get {
      float ret = LeapPINVOKE.Pointable_Length_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsTool {
    get {
      bool ret = LeapPINVOKE.Pointable_IsTool_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsFinger {
    get {
      bool ret = LeapPINVOKE.Pointable_IsFinger_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsExtended {
    get {
      bool ret = LeapPINVOKE.Pointable_IsExtended_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsValid {
    get {
      bool ret = LeapPINVOKE.Pointable_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public Pointable.Zone TouchZone {
    get {
      Pointable.Zone ret = (Pointable.Zone)LeapPINVOKE.Pointable_TouchZone_get(swigCPtr);
      return ret;
    } 
  }

  public float TouchDistance {
    get {
      float ret = LeapPINVOKE.Pointable_TouchDistance_get(swigCPtr);
      return ret;
    } 
  }

  public Vector StabilizedTipPosition {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Pointable_StabilizedTipPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, true);
      return ret;
    } 
  }

  public float TimeVisible {
    get {
      float ret = LeapPINVOKE.Pointable_TimeVisible_get(swigCPtr);
      return ret;
    } 
  }

  public Frame Frame {
    get {
      global::System.IntPtr cPtr = LeapPINVOKE.Pointable_Frame_get(swigCPtr);
      Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, true);
      return ret;
    } 
  }

  public static Pointable Invalid {
    get {
      Pointable ret = new Pointable(LeapPINVOKE.Pointable_Invalid_get(), false);
      return ret;
    } 
  }

  public enum Zone {
    ZONE_NONE = 0,
    ZONE_HOVERING = 1,
    ZONE_TOUCHING = 2,
    ZONENONE = ZONE_NONE,
    ZONEHOVERING = ZONE_HOVERING,
    ZONETOUCHING = ZONE_TOUCHING
  }

}

}
